#!/bin/sh

#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
function check_filenames
{
	if git rev-parse --verify HEAD >/dev/null 2>&1
	then
		against=HEAD
	else
		# Initial commit: diff against an empty tree object
		against=$(git hash-object -t tree /dev/null)
	fi

	# If you want to allow non-ASCII filenames set this variable to true.
	allownonascii="false"

	# Redirect output to stderr.
	exec 1>&2

	if test $(git diff --cached --name-only --diff-filter=A -z $against |
		LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
	then
		echo "Error: Attempt to add a non-ASCII file name."
		echo "This can cause problems if you want to work with people on other platforms."
		echo "To be portable it is advisable to rename the file."
		exit 1
	fi

	# If there are whitespace errors, print the offending file names and fail.
	# exec git diff-index --check --cached $against --
}

function check_mainbranch
{
	branch=`git branch --show-current`
	
	#echo $branch
	if [[ "$branch" =~ (master|main) ]]; then
		echo "ERROR: Commits to $branch are not allowed"
		echo "Please, create a new branch"
		exit 1
	fi

}

function check_branchname
{
	branch=`git branch --show-current`
	valid_branch_regex="^(feature|bugfix|improvement|library|prerelease|release|hotfix)\/[a-z0-9._-]+$"

	message="There is something wrong with your branch name. Branch names in this project must adhere to this contract: $valid_branch_regex. Your commit will be rejected. You should rename your branch to a valid name and try again."
	echo $branch
	if [[ ! $branch =~ $valid_branch_regex ]]
	then
		echo "$message"
		exit 1
	fi

}

check_filenames
check_mainbranch
check_branchname
